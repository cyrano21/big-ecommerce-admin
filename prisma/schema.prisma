generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id     String  @id @default(uuid())
  stores Store[]
  orders Order[]
}

model Store {
  id         String      @id @default(uuid())
  name       String
  address    String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id])
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  sales      Sale[]      @relation("StoreToSale")

  @@index([userId])
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId, createdAt])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id         String             @id @default(uuid())
  storeId    String
  name       String
  value      String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @default(now())
  store      Store              @relation("StoreToSize", fields: [storeId], references: [id])
  products   Product[]
  variations ProductVariation[]

  @@index([storeId])
}

model Color {
  id         String             @id @default(uuid())
  storeId    String
  name       String
  value      String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @default(now())
  store      Store              @relation("StoreToColor", fields: [storeId], references: [id])
  products   Product[]
  variations ProductVariation[]

  @@index([storeId])
}

model Product {
  id          String             @id @default(uuid())
  storeId     String
  categoryId  String
  name        String
  price       Decimal
  isFeatured  Boolean            @default(false)
  isArchived  Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  stock       Int                @default(0)
  description String             @default("")
  store       Store              @relation("StoreToProduct", fields: [storeId], references: [id])
  category    Category           @relation("CategoryToProduct", fields: [categoryId], references: [id])
  sizes       Size[]
  colors      Color[]
  variations  ProductVariation[]
  images      Image[]
  orderItems  OrderItem[]
  saleItems   SaleItem[]

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id           String      @id @default(uuid())
  storeId      String
  isPaid       Boolean     @default(false)
  phone        String      @default("")
  address      String      @default("")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  customerName String      @default("Default Customer")
  totalPrice   Decimal     @default(0)
  userId       String      @default("default-user-id")
  user         User        @relation(fields: [userId], references: [id])
  store        Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems   OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  createdAt DateTime @default(now())
  price     Decimal
  quantity  Int?
  updatedAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Sale {
  id           String     @id @default(uuid())
  storeId      String
  customerName String
  isPaid       Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  store        Store      @relation("StoreToSale", fields: [storeId], references: [id])
  saleItems    SaleItem[]

  @@index([storeId])
}

model SaleItem {
  id        String   @id @default(uuid())
  saleId    String
  productId String
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  sale      Sale     @relation(fields: [saleId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([saleId])
  @@index([productId])
}

model ProductVariation {
  id        String   @id @default(uuid())
  productId String
  sizeId    String
  colorId   String
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      Size     @relation(fields: [sizeId], references: [id])
  color     Color    @relation(fields: [colorId], references: [id])

  @@index([productId])
  @@index([sizeId])
  @@index([colorId])
}

model ColorToProduct {
  A String
  B String

  @@unique([A, B], map: "_ColorToProduct_AB_unique")
  @@index([B], map: "_ColorToProduct_B_index")
  @@map("_ColorToProduct")
}

model ProductToSize {
  A String
  B String

  @@unique([A, B], map: "_ProductToSize_AB_unique")
  @@index([B], map: "_ProductToSize_B_index")
  @@map("_ProductToSize")
}
